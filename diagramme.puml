@startuml
namespace domain {
    class CommonConnection << (S,Aquamarine) >> {
        + Src string
        + Dst string
        + EthernetType string
        + NumberOfPackets int
        + Ts []time.Time
        + DeltaTS []float64

        + GetKey() string

    }
}


namespace infrastructure {
    class Configuration << (S,Aquamarine) >> {
        + Pcapfile string

    }
    class ConfigurationFromFS << (S,Aquamarine) >> {
        + Config Configuration

        + LoadConfig() Configuration

    }
    class LivePacketsAdapter << (S,Aquamarine) >> {
        + Device string
        + SnapshotLen int32
        + Promiscuous bool
        + Timeout time.Duration

        + Read() <font color=blue>map</font>[int]gopacket.Packet

    }
    class SaveConnectionGraphToFsAdapter << (S,Aquamarine) >> {
        + FileAndFolder string

        + ExportConnectionGraph(conncetionGraph string) 

    }
    class SavePNGraphToFsAdapter << (S,Aquamarine) >> {
        + FileAndFolder string

        + PlotData(Daten <font color=blue>map</font>[string]domain.CommonConnection) 

    }
    class SavedPacketsAdapter << (S,Aquamarine) >> {
        + FileAndFolder string

        + Read() <font color=blue>map</font>[int]gopacket.Packet

    }
}

"usecases.PackagePort" <|-- "infrastructure.LivePacketsAdapter"
"usecases.ExportConnectionGraphPort" <|-- "infrastructure.SaveConnectionGraphToFsAdapter"
"usecases.PackagePort" <|-- "infrastructure.SavedPacketsAdapter"

namespace usecases {
    interface ExportConnectionGraphPort  {
        + ExportConnectionGraph(conncetionGraph string) 

    }
    interface PackagePort  {
        + Read() <font color=blue>map</font>[int]gopacket.Packet

    }
    class UcConnectionAnalysis << (S,Aquamarine) >> {
        + Destination ExportConnectionGraphPort

        + MakeConnetionGraph(connections <font color=blue>map</font>[string]domain.CommonConnection) string
        + ExportConnectionGraph(conncetionGraph string) 

    }
    class UcGetNetworkData << (S,Aquamarine) >> {
        + Source PackagePort

        + Read() <font color=blue>map</font>[int]gopacket.Packet
        + CreateNetworkData(Data <font color=blue>map</font>[int]gopacket.Packet) <font color=blue>map</font>[string]domain.CommonConnection

    }
    class UcProfiNETAnalysis << (S,Aquamarine) >> {
        + CalcProfiNetDeltaTimeInMS(Data <font color=blue>map</font>[string]domain.CommonConnection) <font color=blue>map</font>[string]domain.CommonConnection

    }
    class timeSlice << (S,Aquamarine) >> {
        + Less(i int, j int) bool
        + Swap(i int, j int) 
        + Len() int

    }
    class usecases.timeSlice << (T, #FF7700) >>  {
    }
    class "[]time.Time" as timeTime {
        'This class was created so that we can correctly have an alias pointing to this name. Since it contains dots that can break namespaces
    }
}

"usecases.ExportConnectionGraphPort" <|-- "usecases.UcConnectionAnalysis"
"usecases.PackagePort" <|-- "usecases.UcGetNetworkData"

"usecases.timeTime" #.. "usecases.timeSlice"
@enduml
